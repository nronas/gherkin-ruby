#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative "lexer"
  require_relative "../ast"

module GherkinRuby
  class Parser < Racc::Parser

module_eval(<<'...end gherkin.y/module_eval...', 'gherkin.y', 93)

  def parse(input)
    @yydebug = true if ENV['DEBUG_RACC']
    scan_str(input)
  end
...end gherkin.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    16,    26,    27,    28,    29,    30,    31,    16,     3,     7,
    39,    36,    26,    27,    28,    29,    30,    31,    16,    16,
    17,    13,    15,    26,    27,    28,    29,    30,    31,    13,
    19,     3,    33,    34,     3,    15,     3,    15,    16,     3,
    41,     3,    15,    20,     8,     3,    16,    16 ]

racc_action_check = [
    18,    12,    12,    12,    12,    12,    12,    40,     0,     0,
    25,    18,    40,    40,    40,    40,    40,    40,    38,     4,
     4,     2,     2,    38,    38,    38,    38,    38,    38,    10,
     7,    13,    15,    17,     6,    23,    24,     9,    32,    33,
    35,    36,    37,     8,     1,    41,    42,    45 ]

racc_action_pointer = [
     6,    44,    17,   nil,    17,   nil,    32,    17,    43,    32,
    25,   nil,    -6,    29,   nil,    19,   nil,    20,    -2,   nil,
   nil,   nil,   nil,    30,    34,    -3,   nil,   nil,   nil,   nil,
   nil,   nil,    36,    37,   nil,    27,    39,    37,    16,   nil,
     5,    43,    44,   nil,   nil,    45 ]

racc_action_default = [
   -30,   -30,   -30,    -3,   -30,    -5,    -6,   -30,   -30,    -1,
    -2,   -13,   -30,   -30,   -27,   -30,    -4,   -30,    -7,    -9,
    46,   -28,   -14,   -30,   -17,   -30,   -21,   -22,   -23,   -24,
   -25,   -26,   -16,   -30,   -10,    -8,   -30,   -15,   -18,   -20,
   -30,   -30,   -11,   -19,   -29,   -12 ]

racc_goto_table = [
     4,    23,    21,    11,     9,     5,    18,     6,    35,    10,
     2,    22,     1,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    38,    37,   nil,    43,   nil,    44,
    21,   nil,   nil,    40,   nil,   nil,    42,   nil,   nil,   nil,
   nil,    45 ]

racc_goto_check = [
     5,    11,    14,     9,     3,     6,     5,     7,     8,     4,
     2,     9,     1,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,     3,   nil,    11,   nil,    11,
    14,   nil,   nil,     5,   nil,   nil,     5,   nil,   nil,   nil,
   nil,     5 ]

racc_goto_pointer = [
   nil,    12,    10,     2,     7,     0,     5,     7,   -10,     1,
   nil,   -11,   nil,   nil,    -7 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,    24,    25,    14 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 15, :_reduce_1,
  2, 15, :_reduce_2,
  1, 19, :_reduce_none,
  2, 19, :_reduce_none,
  1, 16, :_reduce_5,
  1, 20, :_reduce_6,
  2, 20, :_reduce_7,
  3, 20, :_reduce_8,
  2, 21, :_reduce_9,
  3, 21, :_reduce_10,
  2, 22, :_reduce_11,
  3, 22, :_reduce_12,
  1, 18, :_reduce_13,
  2, 18, :_reduce_14,
  3, 23, :_reduce_15,
  2, 24, :_reduce_16,
  1, 25, :_reduce_17,
  2, 25, :_reduce_18,
  3, 25, :_reduce_19,
  2, 26, :_reduce_20,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 17, :_reduce_27,
  2, 17, :_reduce_28,
  4, 28, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 46

racc_token_table = {
  false => 0,
  :error => 1,
  :NEWLINE => 2,
  :DESCRIBE => 3,
  :GROUPRULE => 4,
  :RULE => 5,
  :TAG => 6,
  :GIVEN => 7,
  :WHEN => 8,
  :THEN => 9,
  :AND => 10,
  :OR => 11,
  :BUT => 12,
  :TEXT => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEWLINE",
  "DESCRIBE",
  "GROUPRULE",
  "RULE",
  "TAG",
  "GIVEN",
  "WHEN",
  "THEN",
  "AND",
  "OR",
  "BUT",
  "TEXT",
  "$start",
  "Root",
  "Describe",
  "Rules",
  "GroupRules",
  "Newline",
  "DescribeHeader",
  "DescribeName",
  "Description",
  "GroupRule",
  "GroupRuleHeader",
  "Steps",
  "Step",
  "Keyword",
  "Rule" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'gherkin.y', 15)
  def _reduce_1(val, _values, result)
     result = val[0]; result.rules = val[1].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 17)
  def _reduce_2(val, _values, result)
     result = val[0]; result.group_rules << val[1].flatten 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'gherkin.y', 26)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 30)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 31)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 33)
  def _reduce_8(val, _values, result)
     result = val[0]; result.description = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 37)
  def _reduce_9(val, _values, result)
     result = AST::Describe.new(val[1]); result.pos(filename, lineno) 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 38)
  def _reduce_10(val, _values, result)
     result = AST::Describe.new(val[2]); result.pos(filename, lineno) 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 42)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 43)
  def _reduce_12(val, _values, result)
     result = val[0...-1].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 47)
  def _reduce_13(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 48)
  def _reduce_14(val, _values, result)
     result = val[0].members << val[1].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 54)
  def _reduce_15(val, _values, result)
     result = val[0]; result.steps << val[1].flatten; result.members << val[2].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 58)
  def _reduce_16(val, _values, result)
     result = AST::GroupRule.new; result.pos(filename, lineno) 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 62)
  def _reduce_17(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 63)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 64)
  def _reduce_19(val, _values, result)
     val[2].unshift(val[0]); result = val[2].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 68)
  def _reduce_20(val, _values, result)
     result = AST::Step.new(val[1], val[0]); result.pos(filename, lineno) 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'gherkin.y', 76)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 77)
  def _reduce_28(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gherkin.y', 82)
  def _reduce_29(val, _values, result)
     result = AST::Rule.new(val[1], val[3]); result.pos(filename, lineno - 1) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module GherkinRuby
